// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package service is a generated GoMock package.
package service

import (
	entity "github.com/bino1490/crypto-svc/pkg/entity"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDBService is a mock of DBService interface
type MockDBService struct {
	ctrl     *gomock.Controller
	recorder *MockDBServiceMockRecorder
}

// MockDBServiceMockRecorder is the mock recorder for MockDBService
type MockDBServiceMockRecorder struct {
	mock *MockDBService
}

// NewMockDBService creates a new mock instance
func NewMockDBService(ctrl *gomock.Controller) *MockDBService {
	mock := &MockDBService{ctrl: ctrl}
	mock.recorder = &MockDBServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDBService) EXPECT() *MockDBServiceMockRecorder {
	return m.recorder
}

// GetDBRecords mocks base method
func (m *MockDBService) GetDBRecords(request entity.DBRequest) ([]entity.DBRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDBRecords", request)
	ret0, _ := ret[0].([]entity.DBRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDBRecords indicates an expected call of GetDBRecords
func (mr *MockDBServiceMockRecorder) GetDBRecords(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDBRecords", reflect.TypeOf((*MockDBService)(nil).GetDBRecords), request)
}
