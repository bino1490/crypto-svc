// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package repository is a generated GoMock package.
package repository

import (
	entity "github.com/bino1490/crypto-svc/pkg/entity"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDbRepository is a mock of DbRepository interface
type MockDbRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDbRepositoryMockRecorder
}

// MockDbRepositoryMockRecorder is the mock recorder for MockDbRepository
type MockDbRepositoryMockRecorder struct {
	mock *MockDbRepository
}

// NewMockDbRepository creates a new mock instance
func NewMockDbRepository(ctrl *gomock.Controller) *MockDbRepository {
	mock := &MockDbRepository{ctrl: ctrl}
	mock.recorder = &MockDbRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDbRepository) EXPECT() *MockDbRepositoryMockRecorder {
	return m.recorder
}

// GetDBRecords mocks base method
func (m *MockDbRepository) GetDBRecords(request entity.DBRequest) ([]entity.DBRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDBRecords", request)
	ret0, _ := ret[0].([]entity.DBRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDBRecords indicates an expected call of GetDBRecords
func (mr *MockDbRepositoryMockRecorder) GetDBRecords(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDBRecords", reflect.TypeOf((*MockDbRepository)(nil).GetDBRecords), request)
}
